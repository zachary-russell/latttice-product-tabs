{"version":3,"file":"frontend.js","mappings":";;;;;AAAA;AACAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACtD;EACA,MAAMC,IAAI,GAAGF,QAAQ,CAACG,gBAAgB,CAAC,aAAa,CAAC;EACrD,MAAMC,mBAAmB,GAAGJ,QAAQ,CAACK,aAAa,CAAC,cAAc,CAAC;EAClE,MAAMC,WAAW,GAAGN,QAAQ,CAACG,gBAAgB,CAAC,oBAAoB,CAAC;;EAEnE;EACAD,IAAI,CAACK,OAAO,CAAEC,GAAG,IAAK;IAClBA,GAAG,CAACP,gBAAgB,CAAC,OAAO,EAAE,YAAY;MACtC;MACA,MAAMQ,OAAO,GAAG,IAAI,CAACC,YAAY,CAAC,sBAAsB,CAAC;MACzD,MAAMC,KAAK,GAAG,IAAI,CAACD,YAAY,CAAC,YAAY,CAAC;;MAE7C;MACAN,mBAAmB,CAACQ,KAAK,CAACC,eAAe,GAAGJ,OAAO;MACnD,IAAI,CAACG,KAAK,CAACC,eAAe,GAAGJ,OAAO;;MAEpC;MACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,IAAI,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;QAClC,IAAIA,CAAC,IAAIH,KAAK,EAAE;UACZ;UACA;UACAT,IAAI,CAACY,CAAC,CAAC,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;UAClCf,IAAI,CAACY,CAAC,CAAC,CAACF,KAAK,CAACC,eAAe,GAAG,SAAS;QAC7C,CAAC,MAAM;UACH;UACA;UACAX,IAAI,CAACY,CAAC,CAAC,CAACE,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;UAC/BhB,IAAI,CAACY,CAAC,CAAC,CAACF,KAAK,CAACC,eAAe,GAAGJ,OAAO;QAC3C;MACJ;;MAEA;MACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,WAAW,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,IAAIA,CAAC,IAAIH,KAAK,EAAE;UACZ;UACAL,WAAW,CAACQ,CAAC,CAAC,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;QAC7C,CAAC,MAAM;UACH;UACAX,WAAW,CAACQ,CAAC,CAAC,CAACE,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;QAC1C;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACA,MAAMC,UAAU,GAAGnB,QAAQ,CAACG,gBAAgB,CAAC,iBAAiB,CAAC;;EAE/D;EACAgB,UAAU,CAACZ,OAAO,CAAEa,SAAS,IAAK;IAC9BA,SAAS,CAACnB,gBAAgB,CAAC,OAAO,EAAE,YAAY;MAC5C;MACA,IAAI,CAACe,SAAS,CAACK,MAAM,CAAC,QAAQ,CAAC;;MAE/B;MACA,MAAMZ,OAAO,GAAG,IAAI,CAACC,YAAY,CAAC,sBAAsB,CAAC;;MAEzD;MACA,IAAI,CAACE,KAAK,CAACC,eAAe,GAAGJ,OAAO;;MAEpC;MACA;MACA,IAAI,CAAC,IAAI,CAACO,SAAS,CAACM,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACpC,IAAI,CAACV,KAAK,CAACC,eAAe,GAAG,EAAE;MACnC;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC,C","sources":["webpack://latttice-product-tabs/./src/frontend.js"],"sourcesContent":["// Wait for the DOM content to be loaded before executing the following code.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    // Get all the desktop tabs, tab content container, and tab content elements.\n    const tabs = document.querySelectorAll(\".tabs > div\");\n    const tabContentContainer = document.querySelector(\".tab-content\");\n    const tabContents = document.querySelectorAll(\".tab-content > div\");\n\n    // Add a click event listener to each desktop tab.\n    tabs.forEach((tab) => {\n        tab.addEventListener(\"click\", function () {\n            // Get the background color and index from the clicked tab's data attributes.\n            const bgcolor = this.getAttribute(\"data-backgroundColor\");\n            const index = this.getAttribute(\"data-index\");\n\n            // Set the background color for the tab content container and the clicked tab.\n            tabContentContainer.style.backgroundColor = bgcolor;\n            this.style.backgroundColor = bgcolor;\n\n            // Loop through all the tabs.\n            for (let i = 0; i < tabs.length; i++) {\n                if (i != index) {\n                    // If the tab is not the clicked one, remove the \"active\" class\n                    // and set the background color to a default value.\n                    tabs[i].classList.remove(\"active\");\n                    tabs[i].style.backgroundColor = \"#e6e6e6\";\n                } else {\n                    // If the tab is the clicked one, add the \"active\" class\n                    // and set the background color according to the data attribute.\n                    tabs[i].classList.add(\"active\");\n                    tabs[i].style.backgroundColor = bgcolor;\n                }\n            }\n\n            // Loop through all the tab contents.\n            for (let i = 0; i < tabContents.length; i++) {\n                if (i != index) {\n                    // If the content is not related to the clicked tab, remove the \"active\" class.\n                    tabContents[i].classList.remove(\"active\");\n                } else {\n                    // If the content is related to the clicked tab, add the \"active\" class.\n                    tabContents[i].classList.add(\"active\");\n                }\n            }\n        });\n    });\n\n    // Get all the mobile tab headers.\n    const tabHeaders = document.querySelectorAll(\".tabs-mobile li\");\n\n    // Add a click event listener to each mobile tab header.\n    tabHeaders.forEach((tabHeader) => {\n        tabHeader.addEventListener(\"click\", function () {\n            // Toggle the \"active\" class for the clicked mobile tab header.\n            this.classList.toggle(\"active\");\n\n            // Get the background color from the clicked mobile tab header's data attributes.\n            const bgcolor = this.getAttribute(\"data-backgroundColor\");\n\n            // Set the background color for the clicked mobile tab header.\n            this.style.backgroundColor = bgcolor;\n\n            // If the mobile tab header doesn't have the \"active\" class,\n            // reset the background color to its default value.\n            if (!this.classList.contains(\"active\")) {\n                this.style.backgroundColor = \"\";\n            }\n        });\n    });\n});\n"],"names":["document","addEventListener","tabs","querySelectorAll","tabContentContainer","querySelector","tabContents","forEach","tab","bgcolor","getAttribute","index","style","backgroundColor","i","length","classList","remove","add","tabHeaders","tabHeader","toggle","contains"],"sourceRoot":""}